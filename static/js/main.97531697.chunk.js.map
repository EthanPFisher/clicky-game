{"version":3,"sources":["components/Nav/index.js","components/Card/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","state","open","width","window","innerWidth","score","highScore","updateWidth","newState","_this","setState","toggleNav","addEventListener","this","removeEventListener","react_default","a","createElement","className","onClick","data-toggle","data-target","aria-controls","aria-expanded","aria-label","concat","id","Component","Card","props","alt","name","src","image","App","pictures","Nav_Nav","map","picture","components_Card","key","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAEqBA,oNACjBC,MAAQ,CACJC,MAAM,EACNC,MAAOC,OAAOC,WACdC,MAAO,EACPC,UAAW,KAGbC,YAAc,WACZ,IAAMC,EAAW,CAAEN,MAAOC,OAAOC,YAE7BK,EAAKT,MAAMC,MAAQO,EAASN,MAAQ,MACtCM,EAASP,MAAO,GAGlBQ,EAAKC,SAASF,MAGhBG,UAAY,WACVF,EAAKC,SAAS,CAAET,MAAOQ,EAAKT,MAAMC,2FAIlCE,OAAOS,iBAAiB,SAAUC,KAAKN,4DAIvCJ,OAAOW,oBAAoB,SAAUD,KAAKN,8CAI1C,OACEQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sDACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,UACEE,QAASN,KAAKF,UACdO,UAAU,iBACVE,cAAY,WACZC,cAAY,aACZC,gBAAc,YACdC,gBAAc,QACdC,aAAW,qBAEXT,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAElBH,EAAAC,EAAAC,cAAA,OAAKC,UAAS,GAAAO,OAAKZ,KAAKb,MAAMC,KAAO,GAAK,YAA5B,mBAA0DyB,GAAG,aACzEX,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAAA,4BAAqBJ,KAAKb,MAAMK,MAAhC,OAEJU,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAAA,2BAAoBJ,KAAKb,MAAMM,sBAnDlBqB,oBCWlBC,MAVf,SAAcC,GACZ,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKa,IAAKD,EAAME,KAAMC,IAAKH,EAAMI,kBCsB1BC,6MAtBblC,MAAQ,CACNmC,oFAIA,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACmB,EAAD,MACCvB,KAAKb,MAAMmC,SAASE,IAAI,SAAAC,GAAO,OAC9BvB,EAAAC,EAAAC,cAACsB,EAAD,CACEb,GAAIY,EAAQZ,GACZc,IAAKF,EAAQZ,GACbK,KAAMO,EAAQP,KACdE,MAAOK,EAAQL,UAGnBlB,EAAAC,EAAAC,cAAA,wCAjBUU,aCMEc,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.97531697.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Nav extends Component {\n    state = {\n        open: false,\n        width: window.innerWidth,\n        score: 0,\n        highScore: 0\n      };\n    \n      updateWidth = () => {\n        const newState = { width: window.innerWidth };\n    \n        if (this.state.open && newState.width > 991) {\n          newState.open = false;\n        }\n    \n        this.setState(newState);\n      };\n    \n      toggleNav = () => {\n        this.setState({ open: !this.state.open });\n      };\n    \n      componentDidMount() {\n        window.addEventListener(\"resize\", this.updateWidth);\n      }\n    \n      componentWillUnMount() {\n        window.removeEventListener(\"resize\", this.updateWidth);\n      }\n    \n      render() {\n        return (\n          <nav className=\"navbar navbar-expand-lg navbar-light bg-light mb-2\">\n            <h1>Clicky Game</h1>\n            <button\n              onClick={this.toggleNav}\n              className=\"navbar-toggler\"\n              data-toggle=\"collapse\"\n              data-target=\"#navbarNav\"\n              aria-controls=\"navbarNav\"\n              aria-expanded=\"false\"\n              aria-label=\"Toggle navigation\"\n            >\n              <span className=\"navbar-toggler-icon\" />\n            </button>\n            <div className={`${this.state.open ? \"\" : \"collapse \"}navbar-collapse`} id=\"navbarNav\">\n              <ul className=\"navbar-nav ml-auto\">\n                <li className=\"nav-item\">\n                    <h2>Current Score: { this.state.score } |</h2>\n                </li>\n                <li className=\"nav-item\">\n                    <h2>| High Score: { this.state.highScore }</h2>\n                </li>\n              </ul>\n            </div>\n          </nav>\n        );\n      }\n}\n","import React from 'react'\nimport \"./style.css\";\n\nfunction Card(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport './App.css';\nimport Nav from \"./components/Nav\";\nimport Card from \"./components/Card\";\nimport pictures from \"./pictures.json\";\n\nclass App extends Component {\n  state = {\n    pictures\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Nav></Nav>\n        {this.state.pictures.map(picture => (\n          <Card\n            id={picture.id}\n            key={picture.id}\n            name={picture.name}\n            image={picture.image}\n          />\n        ))}\n        <text>TESTESTESTESTEST</text>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}